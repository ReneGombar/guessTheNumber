const readline = require('readline');
const rl = readline.createInterface(process.stdin, process.stdout);

//colors are defined by escape sequences
// easter egg works in the Human guessing HALs secret code part of the game
const red = "\x1b[31m";
const bRed = "\x1b[91m";
const yellow = "\x1b[33m";
const bYellow = "\x1b[93m";
const grey = "\x1b[90m";
const white = "\x1b[97m";
const resetColor = "\x1b[0m";
const easterEgg = (2**3 * 3**2 * 5**3)

//text color changing function 
//takes in color and string and returns the string with the added escape characters
function color(color,text){
  return (`${color}${text}${resetColor}`)}

//clears the terminal command .Found on stack overflow
function clearScreen() {
  process.stdout.write("\u001b[3J\u001b[2J\u001b[1J");console.clear();}

//this function reads the stdin as input 
function ask(questionText) {
  return new Promise((resolve, reject) => {
    rl.question(questionText, resolve);
  });
}

//function takes input from a human and returns the player name (Dave or HAL)
// it loops until it receives 1 or 2 
async function choosePlayer(){
  while (true){
    player = await ask(`${color(bRed,"HAL: ")} If you want to guess my memory access passcode enter: 1\n${color(bRed,"HAL: ")} If you want me to guess your passcode enter: 2\n\nyour choice: `)
    if (parseInt(player.trim()) === 1 ){
      console.log(`\n${color(bRed,"HAL: ")} Dave! You will be guessing the access code to my memory banks.${color(grey," egg")} `);
      return "Dave";
    }
    else if (parseInt(player.trim()) === 2){
      console.log(`\n${color(bRed,"HAL: ")} I will guess your secret access code Dave!`);
      return "HAL"}
    else {
    console.log(`\n${color(bRed,"HAL: ")} ${color(yellow,`I am sorry Dave, you can't do that. Try again Dave.`)}\n`)
    }
  }
}

//this function takes human input for the minimu and maximu numbers of the guessing range
// it will return an array with the smallest and biigest number
// it also checks for consistency and correct values for rangeMin and rangeMax
async function numRange(){
  while (true){
  console.log(`\n${color(bRed,"HAL: ")}Dave please enter the range of numbers to guess in (min=0 max=1000?):`);
  let rangeMin = await ask(`${color(bRed,"HAL: ")}What is the smallest number: `);
  let rangeMax = await ask(`${color(bRed,"HAL: ")}What is the highest number: `);
  
  //converts string to integer and if negative returns absolute value
  rangeMin = Math.abs(parseInt(rangeMin));
  rangeMax = Math.abs(parseInt(rangeMax));
  
  //checking that the ranges are corrrect
  if ((rangeMin >= 0) && (rangeMin < rangeMax)) {
    return([rangeMin, rangeMax]);
  }
  else if ((rangeMin >= 0) && (rangeMin === rangeMax)){
    console.log(`\n${color(bRed,"HAL: ")}${color(yellow,`Dave? The range from ${rangeMin} to ${rangeMax} is a single number! Please try again`)}`)
    }
  else if (rangeMin > rangeMax){
    console.log(`\n${color(bRed,"HAL: ")}${color(yellow,`Dave! The smaller number ${rangeMin} is LARGER than ${rangeMax}! I will flip them for you Dave!`)}`);
    let temp = rangeMax;
    rangeMax = rangeMin;
    rangeMin = temp;
    return[rangeMin,rangeMax];
  }
  else {console.log(`\n${color(bRed,"HAL: ")} ${color(yellow,`I am sorry Dave, you can't do that. Try again Dave.`)}`)}
  }
  }

//play again function asks the player if they want to play again after a round has completed
//return true or false
async function playAgain(){
  while (true){
      let again = await ask(`\nPlay Again? Y/N: `);
      again = again.toLowerCase().trim()
      if (again == "y") {
          return true
          }
      else if (again == "n"){
          return false
      }
  }
}

//secret number: if human player is chosen then it returns a secret number picked by a human player
//if HAL is chosen then it returns random number between rangemin and rangemax defined
async function secretNumber(player,rangeMin,rangeMax){
  if (player == "HAL"){
    while (true){
    let secretNum = await ask(`\n${color(bRed,"HAL: ")}Dave! Enter your secret number between ${color(yellow,`${rangeMin} and ${rangeMax}`)}. I will try to guess it: `); 
    secretNum = Math.abs(parseInt(secretNum))
    if (secretNum >= rangeMin && secretNum <= rangeMax){
      return secretNum;
    }
    else {
      console.log(`\n${color(bRed,"HAL: ")} ${color(yellow,`Invalid! Try again.`)}`);
      }
    }
  }
  else {
    secretNum = Math.floor(Math.random() * (Math.floor(rangeMax)-Math.ceil(rangeMin)+1)+rangeMin);
    return secretNum;
  }
}


//this is the guessing game for the human player to guess the random secret number generated by HAL
//it keeps track of attempts and checks conditions
async function guessNumber(rangeMin,rangeMax,secretNum,easterEgg){
  attempts = 0;
  while (true){
    attempts++
    console.log(`\n${color(bRed,"HAL: ")}Dave! The secret access code to my memory bank is between ${color(yellow,`(${rangeMin}-${rangeMax})`)} including ${rangeMin} and ${rangeMax}`)
    let guess = await ask(`${color(bRed,"HAL: ")}What is the correct number Dave?: `);
    guess = parseInt(guess)
    if (guess === secretNum){
      console.log(`\n${color(bYellow,`Congratulations!!!\n    ${secretNum} is the access code to my memory.\n    You guessed it in ${attempts} tries.`)}`);
      return false
      }
    else if (guess > secretNum && guess <= rangeMax && guess >= rangeMin){
      console.log(`\n${color(bRed,"HAL: ")}The access code is ${color(yellow,`smaller`)} than ${guess} Dave.`)
      rangeMax = guess - 1
    }
    else if (guess < secretNum && guess <= rangeMax && guess >= rangeMin){
      console.log(`\n${color(bRed,"HAL: ")}The access code is ${color(yellow,`bigger`)} than ${guess} Dave.`)
      rangeMin = guess + 1
    }
    else if (guess === easterEgg){
      let h = (secretNum * 2) + 7
      console.log(`\n${color(bRed,"HAL: ")} ${color(yellow,`HINT: the access code is (${h}-7)/2`)}`)
      attempts--
    }
    else {
      console.log(`\n${color(bRed,"HAL: ")} ${color(yellow,`I am sorry Dave, you can't do that. Try again Dave.`)}`)
    }
  }
}

// HALguessing function lets HAL guess the secret number chosen by a player 
// it checks conditional statements for correct answers and potentional LIES
// it will find the number in log2(n+1)
async function HALguessing(rangeMin,rangeMax,secretNum){
  clearScreen();
  console.log(`${color(bRed,"HAL: ")}Just to remind you , your secret number is: ${color(yellow,`${secretNum}`)}`);
  attempts = 0;
  while (true){
    attempts++
    let HALsGuess = Math.ceil(rangeMin + ((rangeMax - rangeMin) / 2))
    let guess = await ask(`\n${color(bRed,"HAL: ")} Dave! Is your secret number ${color(yellow,HALsGuess)}? (Y/N): `);
    guess = guess.toLowerCase().trim();
    
    // case for wrong guess and not lying
    if (guess == "n" && (HALsGuess != secretNum)){
      let hint = await ask(`${color(bRed,"HAL: ")}Is your secret number higher or lower than ${color(yellow,`${HALsGuess}`)} Dave? ${color(yellow,"(H/L)")}: `);
      hint = hint.toLowerCase().trim()
      // case for secret number is higher then guess and player answered higher
      if (hint == "h" && (secretNum > HALsGuess)){
        rangeMin = HALsGuess + 1;
      }
      // case for secret number is higher then guess BUT player answered lower
      else if (hint == "l" && (secretNum > HALsGuess)){
        console.log(`\n${color(bRed,"HAL: ")}${color(yellow,`I do not trust you Dave! I think your secret number is`)} ${color(bRed,"HIGHER")} then ${color(bRed,HALsGuess)}!`)
        rangeMin = HALsGuess + 1;
      }
      // case for secret number is lower and player answered lower
      else if (hint == "l" && (secretNum < HALsGuess)){
        rangeMax = HALsGuess - 1
      }
      // case for secret number is lower then guess BUT player answered higher
      else if (hint == "h" && (secretNum < HALsGuess)){
        console.log(`\n${color(bRed,"HAL: ")}${color(yellow,`I do not trust you Dave! I think your secret number is`)} ${color(bRed,"LOWER")} then ${color(bRed,HALsGuess)}!`)
        rangeMax = HALsGuess - 1;
      }
      else {console.log(`\n${color(bRed,"HAL: ")}${color(yellow,`What is wrong with you Dave? Pay attention!`)}`)
        attempts--      
      }
    }
  //case for wrong guess and lying
    else if (guess == "y" && (HALsGuess != secretNum )){
      console.log(`\n${color(bRed,"HAL: ")}${color(yellow,`I do not trust you Dave! Thats NOT your secret number! This attempt does not count`)}`)
      attempts--
    }
  //case for correct guess and lying
    else if (guess == "n" && (HALsGuess === secretNum)){
      console.log(`${color(bRed,"HAL: ")}${color(yellow,`I do not trust you Dave!`)} ${color(bRed,`${HALsGuess} is your secret number! I guessed it in ${attempts} tries`)}`);
      return false;
    }
  //cas for correct guess and not lying
    else if (guess == "y" && HALsGuess === secretNum){
      console.log(`\n${color(bRed,"HAL: ")} ${color(yellow,`YEEEESSSSS !!! I guessed your secret number in ${attempts} tries.`)}`);
      return false;
    }
    else {
      console.log(`\n${color(bRed,"HAL: ")} ${color(yellow,`I am sorry Dave, you can't do that. Try again!`)}`)
      attempts--
    }
  }
}


// main function game() contains all the calls and returns for other functions
async function game(){
  clearScreen();
  HAL();
  console.log(`Welcome aboard ${color(white,"Discovery One.")} I am your friendly AI ${color(bRed,"HAL9000")}\n`);
    let player = await choosePlayer();
    let range = await numRange();
    let rangeMin = range[0];
    let rangeMax = range[1];
    if (player == "Dave"){
      let secretNum = await secretNumber("Dave",rangeMin,rangeMax)
      await guessNumber(rangeMin,rangeMax,secretNum,easterEgg)
    }
    else if (player == "HAL"){
      let secretNum = await secretNumber("HAL",rangeMin,rangeMax)
      await HALguessing(rangeMin,rangeMax,secretNum)
    }
    if (await playAgain()){ 
      game()
    }
    else {
      console.log(`\n${color(bRed,`Thank you for playing. Please consider donating to the Electronic Frontier Foundation at eff.org`)}`);
    rl.close(); 
    }
}

// just having fun here
function HAL(){
  console.log(color(white,`       ,.+##+.,      `))
  console.log(color(white,`    ./#`) + color(grey,"++    ++") + color(white,`#\\.`))
  console.log(color(white,`   /#`) + color(grey,"++") + color(red,"  .++.  ") + color(grey,"++") + color(white,`#\\`))
  console.log(color(white,`   #`) + color(grey,"++  ")  + color(red,"+(") + color(bRed,"\u29BF") + color(red," )+  ") + color(grey,"++") + color(white,`#`))
  console.log(color(white,`   \\#`) + color(grey,"+") + color(red,"   '++'   ") + color(grey,"+") + color(white,`#/`))
  console.log(color(white,`    '\\#`) + color(grey,"++    ++") + color(white,`#/'    `))
  console.log(color(white,`       '*+##+*'      \n`))
}

//added intro so people will stretch their terminals
async function intro(){
  await ask(`${color(white,`Please extend the vertical height of your terminal before playing this game. \nPress Enter to continue`)}`);
  game()
}

intro()

